package com.example.myapplication.utils

import android.util.Log
import com.example.myapplication.model.Song
import com.google.firebase.auth.FirebaseAuth
import com.google.firebase.database.FirebaseDatabase

object HistoryUtils {

    fun saveListeningHistory(
        song: Song,
        currentPosition: Int,
        duration: Int
    ) {
        val uid = FirebaseAuth.getInstance().currentUser?.uid ?: run {
            Log.w("HistoryUtils", "‚ö†Ô∏è Ng∆∞·ªùi d√πng ch∆∞a ƒëƒÉng nh·∫≠p")
            return
        }

        if (duration <= 0) {
            Log.w("HistoryUtils", "‚ö†Ô∏è Th·ªùi l∆∞·ª£ng b√†i h√°t kh√¥ng h·ª£p l·ªá: $duration ms")
            return
        }

        val percentPlayed = (currentPosition * 100) / duration
        if (percentPlayed < 80) {
            Log.d("HistoryUtils", "‚è≥ Ch∆∞a ƒë·ªß 80% ‚Üí kh√¥ng l∆∞u")
            return
        }

        val artistRaw = song.artistNames.firstOrNull().orEmpty()
        val artistId = sanitizeKey(artistRaw)

        val db = FirebaseDatabase.getInstance("https://appmusicrealtime-default-rtdb.asia-southeast1.firebasedatabase.app")
        val userRef = db.getReference("users/$uid/listeningHistory")

        // Ghi th·ªùi gian v√† gi·ªõi h·∫°n 10 t√°c gi·∫£ g·∫ßn nh·∫•t
        val timestamp = System.currentTimeMillis()
        val artistTimeRef = userRef.child("artistTimestamps").child(artistId)
        artistTimeRef.setValue(timestamp).addOnSuccessListener {
            userRef.child("artistTimestamps").get().addOnSuccessListener { snapshot ->
                val sorted = snapshot.children
                    .mapNotNull { it.key?.let { k -> k to (it.getValue(Long::class.java) ?: 0L) } }
                    .sortedByDescending { it.second }
                    .take(10)
                    .associate { it.first to it.second }

                userRef.child("artistTimestamps").setValue(sorted)
                Log.d("HistoryUtils", "üïì L∆∞u artist timestamp='$artistRaw' ($artistId) = $timestamp")
            }
        }

        // L∆∞u t·ªïng ph·∫ßn trƒÉm ƒë√£ nghe c·ªßa artist
        val artistRef = userRef.child("artists").child(artistId)
        artistRef.get().addOnSuccessListener { snapshot ->
            val oldPercent = snapshot.value?.let {
                if (it is Long || it is Int) (it as Number).toInt() else 0
            } ?: 0
            val newPercent = (oldPercent + percentPlayed).coerceAtMost(100)
            artistRef.setValue(newPercent)
            Log.d("HistoryUtils", "üé§ L∆∞u artist='$artistRaw' ($artistId) = $newPercent%")
        }.addOnFailureListener {
            Log.e("HistoryUtils", "‚ùå L·ªói khi ƒë·ªçc artist='$artistId'", it)
        }
    }

    // H√†m l·ªçc key h·ª£p l·ªá cho Firebase (tr√°nh crash do k√Ω t·ª± ƒë·∫∑c bi·ªát)
    private fun sanitizeKey(key: String): String {
        return key.lowercase()
            .replace(".", "_")
            .replace("#", "_")
            .replace("$", "_")
            .replace("[", "_")
            .replace("]", "_")
            .replace("(", "")
            .replace(")", "")
            .replace(" ", "_")
            .replace("/", "_")
    }
}
